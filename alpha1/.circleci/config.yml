defaults: &defaults
  working_directory: ~/mojdigitalstudio/probation-court-prototype
  docker:
    - image: circleci/node:12.3.1-browsers
      environment:
        GITHUB_TEAM_NAME_SLUG: probation-services
        APPLICATON_DEPLOY_NAME: probation-court-prototype
        REPONAME: prepare-probation-courtcases

deploy_container_config: &deploy_container_config
  docker:
    - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
      environment:
        GITHUB_TEAM_NAME_SLUG: probation-services
        APPLICATON_DEPLOY_NAME: probation-court-prototype
        REPONAME: prepare-probation-courtcases

install_aws_cli: &install_aws_cli
  run:
    name: Set up aws
    command: |
      sudo apt-get update
      sudo apt-get --assume-yes install python3-pip
      sudo pip3 install awscli
      $(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)

version: 2
jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Update npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install Dependencies
          command: npm ci
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          command: |
            npm run build
            DATE=$(date '+%Y-%m-%d')
            export BUILD_NUMBER=${DATE}.${CIRCLE_BUILD_NUM}
            export GIT_REF="$CIRCLE_SHA1"
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - public/assets/stylesheets

  test:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: unit tests
          command: npm run test
      - store_test_results:
          path: ./reports

  push_to_ecs:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - setup_remote_docker:
          docker_layer_caching: true
      - *install_aws_cli
      - run:
          name: publish image to ecs
          command: |
            login="$(aws ecr get-login --region eu-west-2 --no-include-email)"
            ${login}
            docker build -t ${ECR_ENDPOINT}/probation-services/probation-court-prototype:${CIRCLE_SHA1} .
            docker tag ${ECR_ENDPOINT}/probation-services/probation-court-prototype:${CIRCLE_SHA1} ${ECR_ENDPOINT}/probation-services/probation-court-prototype:latest
            docker push "${ECR_ENDPOINT}/probation-services/probation-court-prototype:latest"
            docker push "${ECR_ENDPOINT}/probation-services/probation-court-prototype:${CIRCLE_SHA1}"

  deploy_dev:
    <<: *deploy_container_config
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: ~/app
      - run:
          name: Kubectl deployment dev setup
          command: |
            $(aws ecr get-login --region eu-west-2 --no-include-email)
            setup-kube-auth
            kubectl config use-context dev
      - deploy:
          name: Deploy to dev
          command: |
            kubectl set image -f ./kubectl_deploy/deployment.yaml probation-court-prototype=${ECR_ENDPOINT}/probation-services/probation-court-prototype:${CIRCLE_SHA1} --local -o yaml \
            | kubectl apply -f -
            kubectl apply \
              -f ./kubectl_deploy/service.yaml
            kubectl apply \
              -f ./kubectl_deploy/ingress.yaml


workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - push_to_ecs:
          requires:
            - test
          filters:
            branches:
              only:
                - master
      - deploy_dev:
          requires:
            - push_to_ecs
          filters:
            branches:
              only:
                - master
